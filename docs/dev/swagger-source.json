{
	"swagger": "2.0",
	"info": {
		"version": "3.4",
		"title": "REST API - OJS",
		"description": "This document describes how to interact with the REST API in [Open Journal Systems](https://pkp.sfu.ca/software/ojs). It is a technical document intended for software developers who wish to build applications to interact with OJS. This document only describes the REST API for OJS. However, similar REST APIs exist for [Open Monograph Press](https://pkp.sfu.ca/software/omp) and [Open Preprint Systems](https://pkp.sfu.ca/software/ops).\n\nView the [Developer Documentation Hub](https://docs.pkp.sfu.ca/dev) to view all documentation for these applications.",
		"contact": {
			"name": "Public Knowledge Project",
			"url": "https://docs.pkp.sfu.ca"
		},
		"x-logo": {
			"url": "/img/docs-logo.png",
			"altText": "PKP Developer Docs"
		}
	},
	"produces": [
		"application/json"
	],
	"x-tagGroups": [
		{
			"name": "Usage",
			"tags": [
				"What's New in 3.4",
				"Access",
				"Authentication",
				"Pagination",
				"Localization",
				"Links",
				"Using Temporary Files"
			]
		},
		{
			"name": "Endpoints",
			"tags": [
				"Submissions",
				"Submissions / Decisions",
				"Submissions / Files",
				"Submissions / Participants",
				"Submissions / Publications",
				"Submissions / Publications / Contributors",
				"Submissions / DashboardViews",
				"Issues",
				"Users",
				"Contexts",
				"Site",
				"Announcements",
				"DOIs",
				"DOIs / Submissions",
				"DOIs / Issues",
				"Email Templates",
				"Institutions",
				"Mailables",
				"Stats / Contexts",
				"Stats / Editorial",
				"Stats / Issues",
				"Stats / Publications",
				"Stats / Users",
				"Stats / Sushi",
				"Vocabs",
				"Temporary Files",
				"Backend",
				"ORCID",
				"Emails"
			]
		}
	],
	"tags": [
		{
			"name": "What's New in 3.4",
			"x-traitTag": true,
			"description": "<blockquote style=\"margin-bottom:2rem;padding:1rem;border:2px solid #0073A8;color: #002c40\">Read the <a href=\"https://docs.pkp.sfu.ca/dev/release-notebooks/en/3.4-release-notebook\">3.4 Release Notebook</a> to learn about all the changes introduced in 3.4.</blockquote>\n\nThe following changes were made to the REST API.\n\n- Use of the `apiToken` as a query parameter is deprecated. Use it in the `Authorization` header instead. See the \"Authentication\" section below.\n- Changes to request body to create a new submission.\n- Changes to submission titles. They may now include HTML in the `fullTitle`, `title`, and `subtitle` properties.\n- Changes to the submission property, `submissionProgress`. It is now a string, not an integer.\n- Changes to the stats endpoints.\n- Changes to the endpoints to manage email templates.\n\nThe following new endpoints have been added.\n\n- New endpoint to save a submission for later.\n- New endpoint to submit a submission.\n- New endpoint to copy a submission file from one file stage to another.\n- New endpoints to manage a publication's contributors.\n- New endpoints to create and register DOIs.\n- New endpoints to record editorial decisions.\n- New endpoints to manage institutions.\n- New endpoints to get mailables."
		},
		{
			"name": "Access",
			"x-traitTag": true,
			"description": "Use the following to access the `/submissions` endpoint when an application is hosted at `https://example.com/`.\n\n```\nhttps://example.com/api/v1/submissions\n```\n\nA multi-journal OJS installation must access endpoints from each journal's URL.\n\n```\nhttps://example.com/journalpath/api/v1/submissions\n```\n\nInstallations that do not use `mod_rewrite` must include `index.php`.\n\n```\nhttps://example.com/index.php/journalpath/api/v1/submissions\n```\n\nAdministrators can access _some_ endpoints, such as `/contexts`, at a site-wide endpoint that spans all journals.\n\n```\nhttps://example.com/_/api/v1/contexts\n```"
		},
		{
			"name": "Authentication",
			"x-traitTag": true,
			"description": "Only authenticated users can access the REST API endpoints. Authentication can be done with cookies or by using the API token.\n\n## Cookies\n\nCookie-based authentication can be used when you are making a request from the same domain name as the application. When a request is made from the user's browser, the browser will send the cookies to the server.\n\nA CSRF token must be sent with every `POST`, `PUT` or `DELETE` request when using cookie-based authentication. Read more about the [CSRF Token](https://docs.pkp.sfu.ca/dev/ui-library/dev/#/pages/csrf).\n\n## API Token\n\n> The `apiToken` will not validate if the `api_secret_key` setting has not been set in the application's `config.inc.php` file.\n\nYour API token can be found by going to **User Profile > API Key** in the application. Add the API Token in an `Authorization` header with every request made to the API.\n\n```\nAuthorization: Bearer eyJ0e...6vJU\n```\n\n"
		},
		{
			"name": "Pagination",
			"x-traitTag": true,
			"description": "Most API endpoints follow the same convention to return subsequent pages of results. The following would return the second \"page\" of results, if each page contained 30 results.\n\n```\nhttps://example.com/api/v1/submissions?count=30offset=30\n```"
		},
		{
			"name": "Localization",
			"x-traitTag": true,
			"description": "All PKP applications are multilingual. Multilingual fields will be provided as a JSON object with keys specifying the locale codes. The following response shows the `title` property of a publication in English and Canadian French.\n\n```\n{\n\t\"title\": {\n\t\t\"en_US\": \"Young people from an immigrant background and their choice of post-secondary orientation in Montreal\",\n\t\t\"fr_CA\": \"Jeunes issus de l’immigration et choix d’orientation au postsecondaire à Montréal\"\n\t},\n\t...\n}\n```\n\nThis is the same even when an installation only uses a single language.\n\n```\n{\n\t\"title\": {\n\t\t\"fr_CA\": \"Jeunes issus de l’immigration et choix d’orientation au postsecondaire à Montréal\"\n\t},\n\t...\n}\n```\n\nWhen sending `POST` or `PUT` requests, the REST API will expect the data it receives to be passed in the same format."
		},
		{
			"name": "Links",
			"x-traitTag": true,
			"description": "Some responses will include a `_href` property. The value of this property will be a URL to the full version of this object in the REST API.\n\n```\n{\n\t\"_href\": \"http://example.com/api/v1/submissions/219\"\n\t...\n}\n```"
		},
		{
			"name": "Using Temporary Files",
			"x-traitTag": true,
			"description": "Files can be uploaded by sending a `POST` request to the `/temporaryFiles` endpoint. It will return a file ID which can be used in subsequent requests. Let's look at an example.\n\nTo upload a logo for a context (journal, press, or preprint server),  upload the image by sending a `POST` request to `/temporaryFiles`. A successful upload will generate the following response:\n\n```\n{\n\tid: 123\n}\n```\n\nTo save the logo to the context, send a `PUT` request to `/contexts/1`:\n\n```\n{\n\tpageHeaderLogoImage: {\n\t\ttemporaryFileId: 123,\n\t\taltText: \"Logo for the Journal of Public Knowledge\"\n\t}\n}\n```\n\nThe file will be moved from the temporary directory to its public location, overwriting any existing logo.\n\nTemporary files can only be managed by the **the user who uploaded the file**. If a user passes a `temporaryFileId` for a file they did not upload themselves, they will receive an authorization error."
		},
		{
			"name": "Submissions"
		},
		{
			"name": "Submissions / Decisions",
			"description": "Use these endpoints to get or record editorial decisions on a submission. Editorial decisions include actions like accepting or declining a submission, sending a submission to the next stage, and requesting revisions. Editorial decisions can not be edited or deleted after they are recorded. Learn more about [Decisions](https://docs.pkp.sfu.ca/dev/documentation/en/decisions)."
		},
		{
			"name": "Submissions / Files"
		},
		{
			"name": "Submissions / Participants"
		},
		{
			"name": "Submissions / Publications"
		},
		{
			"name": "Submissions / Publications / Contributors"
		},
		{
			"name": "Submissions / DashboardViews"
		},
		{
			"name": "Issues"
		},
		{
			"name": "Users",
			"description": "Only admins, journal editors, and subeditors can access these endpoints."
		},
		{
			"name": "Contexts",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Site",
			"description": "Only admins can access these endpoints, which should be accessed using `_` instead of the journal path."
		},
		{
			"name": "Announcements",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "DOIs",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "DOIs / Submissions",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "DOIs / Issues",
			"description": "Only admins and journal managers can access these endpoints. These endpoints are only available when issues have been configured to receive DOIs in the DOI settings."
		},
		{
			"name": "Email Templates",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Institutions",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Mailables",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Stats / Editorial",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Stats / Contexts",
			"description": "Only admins and journal managers can access these endpoints. Some of these endpoints can return results in CSV format. Where possible, send an `Accept: text/csv` header with the request to receive stats in CSV format."
		},
		{
			"name": "Stats / Issues",
			"description": "Only admins and journal managers can access these endpoints. Some of these endpoints can return results in CSV format. Where possible, send an `Accept: text/csv` header with the request to receive stats in CSV format."
		},
		{
			"name": "Stats / Publications",
			"description": "Only admins and journal managers can access these endpoints. Some of these endpoints can return results in CSV format. Where possible, send an `Accept: text/csv` header with the request to receive stats in CSV format."
		},
		{
			"name": "Stats / Users",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Stats / Sushi",
			"description": "COUNTER R5 reports can be harvested via the COUNTER_SUSHI API at the path /stats/sushi. The specification is documented at the link below.",
			"externalDocs": {
				"description": "COUNTER/SUSHI 5.0 API",
				"url": "https://app.swaggerhub.com/apis/COUNTER/counter-sushi_5_0_api/"
			}
		},
		{
			"name": "Vocabs",
			"description": "Handle controlled vocabularies like keywords and subjects. Only admins, journal managers, subeditors, assistants and authors can access these endpoints."
		},
		{
			"name": "Temporary Files",
			"description": "A special endpoint to be used for handling file uploads. See the [API Usage Guide](/dev/api) for more information."
		},
		{
			"name": "Backend",
			"description": "Private endpoints for OJS's UI. These endpoints will be less stable between versions. We discourage their use in third-party plugins or applications."
		},
		{
			"name": "ORCID",
			"description": "Endpoints for managing ORCID."
		},
		{
			"name": "Emails",
			"description": "Endpoints used to retrieve user emails."
		}
	],
	"definitions": {
		"Announcement": "announcement",
		"Author": "author",
		"Context": "context",
		"ContextStats": {
			"type": "object",
			"description": "Reader stats for the homepage for a journal, press or preprint server.",
			"properties": {
				"total": {
					"description": "The number of views of the homepage.",
					"type": "integer"
				},
				"context": {
					"type": "object",
					"properties": {
						"_href": {
							"type": "string"
						},
						"abbreviation": {
							"$ref": "#/definitions/LocaleObject"
						},
						"acronym": {
							"$ref": "#/definitions/LocaleObject"
						},
						"currentIssueId": {
							"type": "integer"
						},
						"description": {
							"$ref": "#/definitions/LocaleObject"
						},
						"enabled": {
							"type": "boolean"
						},
						"id": {
							"type": "integer"
						},
						"journalThumbnail": {
							"$ref": "#/definitions/LocaleObject"
						},
						"name": {
							"$ref": "#/definitions/LocaleObject"
						},
						"seq": {
							"type": "integer"
						},
						"url": {
							"type": "string"
						},
						"urlPath": {
							"type": "string"
						}
					}
				}
			}
		},
		"Decision": "decision",
		"DecisionAction": {
			"a": "b",
			"c": "d",
			"actions": [
				{
					"$ref": "#/definitions/DecisionEmail"
				}
			]
		},
		"Doi": "doi",
		"ErrorResponse": {
			"type": "object",
			"description": "A response object that will be returned when the request could not be fulfilled.",
			"properties": {
				"error": {
					"type": "string"
				},
				"errorMessage": {
					"type": "string"
				}
			}
		},
		"EmailTemplate": "emailTemplate",
		"Email": "emailLog",
		"Galley": "galley",
		"Institution": "institution",
		"InvalidParametersResponse": {
			"type": "object",
			"description": "A response object that will be returned when there are validation errors for the request parameters. Typically used with forms.",
			"example": {
				"name": [
					"You must provide a name to create a new user."
				],
				"roles": [
					"You must assign the user to one or more roles."
				]
			}
		},
		"Issue": "issue",
		"IssueStats": {
			"type": "object",
			"description": "Reader stats for an issue.",
			"properties": {
				"totalViews": {
					"description": "The number of views of the issue table of contents and galley.",
					"type": "integer"
				},
				"tocViews": {
					"description": "The number of views of the issue table of contents.",
					"type": "integer"
				},
				"issueGalleyViews": {
					"description": "The number of views of the issue galley.",
					"type": "integer"
				},
				"issue": {
					"type": "object",
					"properties": {
						"_href": {
							"type": "string"
						},
						"id": {
							"type": "integer"
						},
						"identification": {
							"type": "string"
						},
						"publishedUrl": {
							"type": "string"
						}
					}
				}
			}
		},
		"LocaleObject": {
			"type": "object",
			"description": "Key/value pairs containing data stored by locale key.",
			"example": {
				"en": "Filename",
				"fr_CA": "Nom de fichier"
			}
		},
		"Mailable": {
			"type": "object",
			"example": {
				"_href": "https://example.org/publicknowledge/api/v1/mailables/DISCUSSION_NOTIFICATION_COPYEDITING",
				"dataDescriptions": {
					"journalName": "The journal's name",
					"journalUrl": "The URL to the journal's homepage",
					"...": "All prepared data"
				},
				"description": "This email is sent when a discussion is created or replied to in the copyediting stage.",
				"emailTemplateKey": "DISCUSSION_NOTIFICATION_COPYEDITING",
				"fromRoleIds": [
					17,
					4097,
					65536
				],
				"groupIds": [
					"copyediting"
				],
				"name": "Discussion (Copyediting)",
				"supportsTemplates": true,
				"toRoleIds": [
					17,
					4097,
					65536
				],
				"emailTemplates": [
					{
						"_href": "https://example.org/publicknowledge/api/v1/emailTemplates/DISCUSSION_NOTIFICATION_COPYEDITING",
						"alternateTo": null,
						"body": {
							"fr_CA": "Prière de saisir votre message.",
							"en": "Please enter your message."
						},
						"contextId": null,
						"id": null,
						"key": "DISCUSSION_NOTIFICATION_COPYEDITING",
						"name": {
							"fr_CA": "",
							"en": "Discussion (Copyediting)"
						},
						"subject": {
							"fr_CA": "Un message à propos de la revue {$journalName}",
							"en": "A message regarding {$journalName}"
						}
					},
					{
						"_href": "https://example.org/publicknowledge/api/v1/emailTemplates/COPYEDIT_REQUEST",
						"alternateTo": "DISCUSSION_NOTIFICATION_COPYEDITING",
						"body": {
							"en": "<p>Dear {$recipientName},</p><p>A new submission is ready to be copyedited:</p><p><a href\"{$submissionUrl}\">{$submissionId} {$submissionTitle}</a><br />{$journalName}</p><p>Please follow these steps to complete this task:</p><ol><li>1. Click on the Submission URL below.</li><li>2. Open any files available under Draft Files and edit the files. Use the Copyediting Discussions area if you need to contact the editor(s) or author(s).</li><li>3. Save the copyedited file(s) and upload them to the Copyedited panel.</li><li>4. Use the Copyediting Discussions to notify the editor(s) that all files have been prepared, and that the Production process may begin.</li></ol><p>If you are unable to undertake this work at this time or have any questions, please contact me. Thank you for your contribution to this journal.</p><p>Kind regards,</p>{$signature}",
							"fr_CA": "{$recipientName},<br />\n<br />\nJ'aimerais que vous effectuiez la révision du manuscrit intitulé « {$submissionTitle} » pour la revue {$journalName} à l'aide des étapes suivantes.<br />\n1. Cliquer sur l'URL de la soumission ci-dessous.<br />\n2. Ouvrir le(s) fichier(s) disponible(s) sous Fichiers des ébauches finales et effectuer votre révision, tout en ajoutant des discussions sur la révision, le cas échéant.<br />\n3. Enregistrer le(s) fichier(s) révisé(s) et le(s) téléverser dans la section Version(s) révisée(s).<br />\n4. Informer le,la rédacteur-trice que tous les fichiers ont été révisés et que l'étape de production peut débuter.<br />\n<br />\nURL de la revue {$journalName} : {$journalUrl}<br />\nURL de la soumission : {$submissionUrl}<br />\nNom d'utilisateur-trice : {$recipientUsername}"
						},
						"contextId": 1,
						"id": 1,
						"key": "COPYEDIT_REQUEST",
						"name": {
							"en": "Request Copyedit",
							"fr_CA": ""
						},
						"subject": {
							"en": "Submission {$submissionId} is ready to be copyedited for {$contextAcronym}",
							"fr_CA": "Demande de révision d'une soumission"
						}
					}
				]
			}
		},
		"MailableSummary": {
			"type": "object",
			"example": {
				"_href": "https://example.org/publicknowledge/api/v1/mailables/DISCUSSION_NOTIFICATION_COPYEDITING",
				"dataDescriptions": {
					"journalName": "The journal's name",
					"journalUrl": "The URL to the journal's homepage",
					"...": "All prepared data"
				},
				"description": "This email is sent when a discussion is created or replied to in the copyediting stage.",
				"emailTemplateKey": "DISCUSSION_NOTIFICATION_COPYEDITING",
				"fromRoleIds": [
					17,
					4097,
					65536
				],
				"groupIds": [
					"copyediting"
				],
				"name": "Discussion (Copyediting)",
				"supportsTemplates": true,
				"toRoleIds": [
					17,
					4097,
					65536
				]
			}
		},
		"Publication": "publication",
		"PublicationCityStats": {
			"type": "object",
			"description": "Reader stats of a publication by city.",
			"properties": {
				"city": {
					"type": "string"
				},
				"region": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"total": {
					"description": "The number of visits to this publication from this city.",
					"type": "integer"
				},
				"unique": {
					"description": "The number of unique visitors to this publication from this city.",
					"type": "integer"
				}
			}
		},
		"PublicationRegionStats": {
			"type": "object",
			"description": "Reader stats of a publication by region.",
			"properties": {
				"region": {
					"type": "string"
				},
				"country": {
					"type": "string"
				},
				"total": {
					"description": "The number of visits to this publication from this region.",
					"type": "integer"
				},
				"unique": {
					"description": "The number of unique visitors to this publication from this region.",
					"type": "integer"
				}
			}
		},
		"PublicationCountryStats": {
			"type": "object",
			"description": "Reader stats of a publication by country.",
			"properties": {
				"country": {
					"type": "string"
				},
				"total": {
					"description": "The number of visits to this publication from this country.",
					"type": "integer"
				},
				"unique": {
					"description": "The number of unique visitors to this publication from this country.",
					"type": "integer"
				}
			}
		},
		"PublicationFileStats": {
			"type": "object",
			"description": "The number of downloads of a submission file.",
			"properties": {
				"submissionId": {
					"type": "integer"
				},
				"submissionTitle": {
					"type": "string"
				},
				"submissionFileId": {
					"type": "integer"
				},
				"fileName": {
					"type": "string"
				},
				"downloads": {
					"type": "integer"
				}
			}
		},
		"PublicationStats": {
			"type": "object",
			"description": "The total abstract and galley views for a published submission.",
			"properties": {
				"abstractViews": {
					"type": "integer"
				},
				"galleyViews": {
					"type": "integer"
				},
				"pdfViews": {
					"type": "integer"
				},
				"htmlViews": {
					"type": "integer"
				},
				"otherViews": {
					"type": "integer"
				},
				"publication": {
					"type": "object",
					"properties": {
						"_href": {
							"type": "string"
						},
						"fullTitle": {
							"$ref": "#/definitions/LocaleObject"
						},
						"id": {
							"type": "integer"
						},
						"shortAuthorString": {
							"type": "string"
						},
						"urlPublished": {
							"type": "string"
						},
						"urlWorkflow": {
							"type": "string"
						}
					}
				}
			}
		},
		"Contributor": "author",
		"ReviewRound": "reviewRound",
		"ReviewerSummary": {
			"type": "object",
			"description": "A special representation of a User assigned to a reviewer group. This model presents specific details about review activity.",
			"properties": {
				"_href": {
					"type": "string"
				},
				"affiliation": {
					"$ref": "#/definitions/LocaleObject"
				},
				"averageReviewCompletionDays": {
					"type": "integer"
				},
				"dateLastReviewAssignment": {
					"type": "string"
				},
				"disabled": {
					"type": "boolean"
				},
				"fullName": {
					"type": "string"
				},
				"gossip": {
					"$ref": "#/definitions/LocaleObject"
				},
				"groups": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UserGroup"
					}
				},
				"id": {
					"type": "integer"
				},
				"interests": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UserInterest"
					}
				},
				"reviewsActive": {
					"type": "integer"
				},
				"reviewsCompleted": {
					"type": "integer"
				},
				"reviewsCancelled": {
					"type": "integer"
				},
				"reviewsDeclined": {
					"type": "integer"
				},
				"userName": {
					"type": "string"
				}
			}
		},
		"Section": "section",
		"Site": "site",
		"Submission": "submission",
		"SubmissionFile": "submissionFile",
		"ThemeOptions": {
			"type": "object",
			"description": "A theme with values for any of its theme options. The theme is provided in the `themePluginPath` key. Other keys may or may not exist depending on what options have been defined by that theme.",
			"properties": {
				"themePluginPath": {
					"type": "string"
				},
				"...": {
					"type": "string"
				}
			}
		},
		"TimelineInterval": {
			"type": "object",
			"properties": {
				"date": {
					"type": "string",
					"description": "A machine-readable date in the format `YYYY-MM-DD` or `YYYY-MM`."
				},
				"label": {
					"type": "string",
					"description": "A human-readable format of the date, based on the context's configured date foramts."
				},
				"value": {
					"type": "integer",
					"description": "The total for this day or month."
				}
			}
		},
		"User": "user",
		"UserGroup": "userGroup",
		"UserInterest": {
			"type": "object",
			"description": "A user's review interests.",
			"properties": {
				"id": {
					"type": "integer"
				},
				"interest": {
					"type": "string"
				}
			}
		}
	},
	"paths": {
		"/submissions": {
			"get": {
				"tags": [
					"Submissions"
				],
				"summary": "Get a list of submissions.",
				"description": "See `/submissions/{submissionId}` for notes about submission properties.",
				"parameters": [
					{
						"name": "assignedTo",
						"description": "Filter results by those assigned to one or more user ids. All users except managers and admins are automatically restricted to assigned submissions and do not need to pass this parameter.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "categoryIds",
						"description": "Filter results by those assigned to one of these categories.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "daysInactive",
						"description": "Filter the results by those which have not had activity for the last X days.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "isIncomplete",
						"description": "Filter the results by those for which the author has not yet completed the submission process.",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "isOverdue",
						"description": "Filter the results by those for which a reviewer has missed a deadline.",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "issueIds",
						"description": "Filter the results by those with one or more publications assigned to an issue.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "dateSubmitted",
						"enum": [
							"datePublished",
							"dateSubmitted",
							"lastActivity",
							"lastModified",
							"sequence",
							"title"
						]
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the title and authors.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sectionIds",
						"description": "Filter the results by those with one or more publications assigned to a section.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "stageIds",
						"description": "Filter results by those currently in one of these workflow stages. Expects one of the `WORKFLOW_STAGE_ID_*` constants.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer",
							"enum": [1,3,4,5]
						}
					},
					{
						"name": "status",
						"description": "Filter results by one or more submission statuses. Must match the value of one of the `PKPSubmission::STATUS_QUEUED`, `PKPSubmission::STATUS_SCHEDULED`, `PKPSubmission::STATUS_PUBLISHED` or `PKPSubmission::STATUS_DECLINED` constants.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer",
							"enum": [1,3,4,5]
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of requested submissions.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/SubmissionSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access submissions assigned to the user requested in the `assignedTo` parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Submissions"
				],
				"summary": "Create a new submission.",
				"parameters": [
					{
						"description": "Details about the submission that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/SubmissionEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the submission that was just added.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}": {
			"get": {
				"tags": [
					"Submissions"
				],
				"summary": "Get a submission by ID.",
				"description": "* Unpublished submissions are only returned for assigned participants, editors and admins.\n* `abstract` includes HTML markup.\n* `pages` is usually a `string`. But in some cases it may return an array of arrays. Each array contains two items: the start and end page. Example: `[[25, 31], [45, 62]]`.\n* `submissionProgress` will be > 0 if the submission is incomplete.\n* `stages`, `reviewRounds` and `reviewAssignments` should only be returned for participants assigned to the submission.\n* `reviewAssignments` should only expose user-identifying information for editors and admins.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission details.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access this submissions.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Submissions"
				],
				"summary": "Edit a submission.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the submission that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/SubmissionEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission that was just edited with the new values after the update has occurred.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This error indicates one of the following:\n* You are not allowed to edit a submission from the site-wide endpoint. You must use a context (journal/press/server) endpoint.\n* You are not allowed to change the context (journal/press/server) of a submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Submissions"
				],
				"summary": "Delete a submission.",
				"description": "Only journal managers and subeditors can make a request to this endpoint.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the deleted submission.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to delete this submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/saveForLater": {
			"put": {
				"tags": [
					"Submissions"
				],
				"summary": "Save a submission for later",
				"description": "Sets the current step of the submission in the submission wizard and sends an email to the submitting author with a link to resume their submission. This API endpoint does not save any data about the submission. Use the regular `PUT` endpoints to save data for submissions, publications, files, and authors.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"step": {
									"description": "The step of the submission wizard to open when the author resumes their submission.",
									"type": "string",
									"enum": [
										"details",
										"files",
										"contributors",
										"editors",
										"review"
									]
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission that was saved for later.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This error indicates that you are not allowed to edit this submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/submit": {
			"put": {
				"tags": [
					"Submissions"
				],
				"summary": "Submit a submission",
				"description": "Submits a submission for editorial review. Any automated editorial assignments, comments for the editor, or other submission events will be triggered.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"_validateOnly": {
									"description": "When `true`, the validation checks will be performed but the submission will not be submitted.",
									"in": "query",
									"required": false,
									"type": "boolean"
								},
								"confirmCopyright": {
									"description": "Pass `true` to indicate that the author has agreed to the copyright notice. An entry will be added to the submission's activity log to record the author's acceptance of the copyright agreement.",
									"type": "boolean",
									"required": "false"
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission that was saved for later. Or, if the `_validateOnly` query param is passed and no validation errors are found, the response body will be empty.",
						"schema": {
							"$ref": "#/definitions/Submission"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Any validation errors that must be fixed before this submission can be submitted. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This error indicates that you are not allowed to edit this submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/decisions": {
			"get": {
				"tags": [
					"Submissions / Decisions"
				],
				"summary": "Get decisions for a submission.",
				"description": "Get the editorial decisions that have been recorded for this submission.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "decisionTypes",
						"description": "Filter results by the decision type. List of the `Decision::*` constants.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "editorIds",
						"description": "Filter results by specific editor IDs.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "reviewRoundId",
						"description": "Filter results by a specific review round ID",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "stageId",
						"description": "Filter results by a specific workflow stage Id",
						"in": "query",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success.",
						"description": "An array of the decisions recorded for this submission.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DecisionSummary"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view decisions for the requested submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Submissions / Decisions"
				],
				"summary": "Record a decision for a submission.",
				"description": "Record a new editorial decision for this submission. This endpoint is configured to support customizable actions when recording a decision. Each decision supports pre-defined actions, but plugins can extend each decision to take additional actions or create new decisions.\n\nMost of the built-in decisions use one or more actions. View the \"Request samples\" for this endpoint to see which decisions use which actions. Most decisions use one or more of the following types:\n\n| Action | Description |\n| --- | --- |\n| Email | Details about the email message, recipients and attachments. If the example request body includes an empty `recipients` array, that means the decision does not allow the recipients to be modified. It is configured to always send to the same recipients. For example, most emails to notify authors will automatically be sent to the assigned authors and co-authors, depending on how the journal has configured their email notification settings. |\n| Form | A form payload that includes the action `id` and any input data from the form. |\n\nA custom decision is not restricted to these types. Any data can be sent through the `actions` property and handled on the server. Learn more about [Decisions](https://docs.pkp.sfu.ca/dev/documentation/en/decisions).",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/definitions/DecisionEditable"
							}
						}
					}
				},
				"responses": {
					"200": {
						"x-summary": "Success.",
						"description": "The decision that was recorded.",
						"schema": {
							"$ref": "#/definitions/DecisionSummary"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view decisions for the requested submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/files": {
			"get": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Get a submission's files.",
				"description": "This will return all of a submission's files that the user is allowed to access, except review attachments and discussion files. A user is allowed to access different file stages depending on their stage assignment.\n* Managers, subeditors and assistants can access all file stages if they are assigned to the matching workflow stage. For example, an assistant assigned to the copyediting stage can access files in `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_FINAL`.\n* Authors are restricted to the `SUBMISSION_FILE_SUBMISSION`, `SUBMISSION_FILE_REVIEW_REVISION`, `SUBMISSION_FILE_COPYEDIT` and `SUBMISSION_FILE_PROOF` file stages. For example, an author with access to the copyediting stage will have access to `SUBMISSION_FILE_COPYEDIT` (copyedited files) but not `SUBMISSION_FILE_FINAL` (draft files).\n* Reviewers and readers are not allowed to access this endpoint.\n* Managers who are not assigned to the submission are allowed to access all file stages as though they are assigned to every workflow stage.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "fileStages",
						"description": "Filter results by those submission files assigned to one or more file stage. One of the `SUBMISSION_FILE_` constants.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "reviewRoundIds",
						"description": "Filter results by those submission files assigned to one or more review rounds.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success.",
						"description": "An array of the requested submission files.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SubmissionFileSummary"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view the requested files.\n\n|Error Code|Description|\n|---|---|\n|`api.403.unauthorized`|You are not allowed to access files for this submission.|\n|`api.submissionFiles.403.unauthorizedFileStageId`|You are not allowed to access files in one or more of the `fileStages` requested.|\n|`api.submissionFiles.403.unauthorizedReviewRound`|You are not allowed to access files in one or more of the `reviewRoundIds` requested.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Create a new submission file.",
				"description": "A user is allowed to upload to different file stages depending on their stage assignments. See the description for `GET /submission/{submissionId}/files` above. Once a submission has been completed, authors are no longer allowed to upload to `SUBMISSION_FILE_SUBMISSION`. Authors are not allowed to upload to `SUBMISSION_FILE_REVIEW_REVISION` until revisions have been requested.",
				"consumes": "multipart/form-data",
				"parameters": [
					{
						"description": "Details about the submission file that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/SubmissionFileEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The new submission file.",
						"schema": {
							"$ref": "#/definitions/SubmissionFile"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to upload a file to the specified file stage of this submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/files/{submissionFileId}": {
			"get": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Get a submission file.",
				"description": "You must pass the correct `stageId` when requesting a file.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "submissionFileId",
						"in": "path",
						"description": "Submission File ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "stageId",
						"in": "query",
						"description": "The workflow stage id of the requested file. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the submission file.",
						"schema": {
							"$ref": "#/definitions/SubmissionFile"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to access the requested file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Edit a submission file.",
				"description": "You must pass the correct `stageId` when editing a file.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "submissionFileId",
						"in": "path",
						"description": "Submission File ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "stageId",
						"in": "query",
						"description": "The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the submission file that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/SubmissionFileEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission file that was just edited with the new values after the update has occurred.",
						"schema": {
							"$ref": "#/definitions/SubmissionFile"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to edit the requested file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Delete a submission file.",
				"description": "You must pass the correct `stageId` when deleting a file.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "submissionFileId",
						"in": "path",
						"description": "Submission File ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "stageId",
						"in": "query",
						"description": "The workflow stage id of the file to be edited. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The submission file that was just deleted.",
						"schema": {
							"$ref": "#/definitions/SubmissionFile"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to delete the requested file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission or file could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/files/{submissionFileId}/copy": {
			"put": {
				"tags": [
					"Submissions / Files"
				],
				"summary": "Copy a submission file.",
				"description": "Copy a submission file to a new file stage. This is usually used to promote a file from one stage to another. For example, a file in \"Revisions\" can be promoted to \"Files for Copyediting\" so that a copyeditor can begin working with it. Learn more about [File Stages](https://docs.pkp.sfu.ca/dev/documentation/en/submission-files#file-stages).",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "submissionFileId",
						"in": "path",
						"description": "Submission File ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "stageId",
						"in": "query",
						"description": "The workflow stage id of the file to be copied. For example, `WORKFLOW_STAGE_ID_PRODUCTION`.",
						"required": true,
						"type": "integer"
					},
					{
						"in": "body",
						"schema": {
							"type": "object",
							"required": ["toFileStage"],
							"properties": {
								"reviewRoundId": {
									"type": "integer",
									"description": "Optional. The ID of a review round to copy this file to. Only use this when you want to copy a file to a file stage in a particular review round. If omitted, the file will be copied to the latest review round."
								},
								"toFileStage": {
									"type": "integer",
									"description": "One of the `SubmissionFile::SUBMISSION_FILE_*` constants. Learn about [File Stages](https://docs.pkp.sfu.ca/dev/documentation/en/submission-files#file-stages)."
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The new submission file that was created.",
						"schema": {
							"$ref": "#/definitions/SubmissionFile"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "There was an error when uploading the file or the values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.\n\n| Error Code | Message |\n| --- | --- |\n| `api.submissionFiles.400.noFileStageId` | No parameter `toFileStage` was found in the request body. |\n| `api.submissionFiles.400.invalidFileStage` | The value of `toFileStage` does not match a known file stage. |\n| `api.submissionFiles.400.reviewRoundSubmissionNotMatch` | The `reviewRoundId` specified is not part of this submission. |\n| `api.submissionFiles.400.reviewRoundIdRequired` | No valid review round was found to copy this file to. |",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You are not allowed to copy the requested file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission or file could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/participants": {
			"get": {
				"tags": [
					"Submissions / Participants"
				],
				"summary": "Get assigned participants.",
				"description": "Get the participants assigned to a submisssion.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of users assigned to a submission",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/UserSummary"
							}
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/participants/{stageId}": {
			"get": {
				"tags": [
					"Submissions / Participants"
				],
				"summary": "Get assigned participants by stage.",
				"description": "Get all participants assigned to a submission for a specific workflow stage, such as the review or copyediting stage.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "stageId",
						"in": "path",
						"description": "Stage ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of users assigned to the requested stage of the requested submission",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/UserSummary"
							}
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications": {
			"get": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Get a submission's publications.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of publications for this submission.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Publication"
							}
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Create a publication.",
				"description": "Create a new publication for a submission.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "Details about the publication that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/PublicationEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the publication that was just added.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}": {
			"get": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Get a publication.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The publication details",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission or publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Edit a publication.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the publication that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/PublicationEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The publication that was just edited with the new values after the update has occurred.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This error indicates one of the following:\n* The publication you want to edit does not belong to this submission.\n* This publication is published and can not be edited. You must create and publish a new version.\n* You do not have permission to edit this publication.\n* You are not allowed to modify the `status` of a publication. You must use the `/submissions/{submissionId}/publications/{publicationId}/publish` and `.../unpublish` endpoints to modify the status of a publication.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Delete a publication.",
				"description": "Only journal managers and subeditors can make a request to this endpoint.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The publication that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This may mean one of the following:\n* You are not allowed to delete this publication.\n* The publication does not belong to this submission.\n* This publication is published and can not be deleted.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submission could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/version": {
			"post": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Create a new version of a publication.",
				"description": "Duplicate a publication, including author and galley records, in order to create a new version of a publication that can be edited.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the new publication that was created.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "The publication you want to version does not belong to this submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/publish": {
			"put": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Publish a publication.",
				"description": "If the publication is assigned to an issue that is not yet published, it will be scheduled for publication and the `status` will be set to `PKPSubmission::STATUS_SCHEDULED`. If the issue is already published, it will be published immediately and the `status` will be set to `PKPSubmission::STATUS_PUBLISHED`.\n\nThe publication will be validated against any publishing requirements before it is published and a `400` response will be returned if it fails validation.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the publication that was just published.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One or more publication requirements have not been met.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "A 403 response means that the publication you want to version does not belong to this submission or that the publication is already published.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/unpublish": {
			"put": {
				"tags": [
					"Submissions / Publications"
				],
				"summary": "Unpublish a publication.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the publication that was just unpublished.",
						"schema": {
							"$ref": "#/definitions/Publication"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "A 403 response means that the publication you want to version does not belong to this submission or that the publication is already unpublished.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/contributors": {
			"get": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Get a publication's contributors.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of contributors for this publication.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Contributor"
							}
						}
					},
					"404": {
						"x-summary": "Publication Not Found",
						"description": "The requested publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Publication Invalid",
						"description": "The requested publication is not part of the requested submission.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Create a contributor.",
				"description": "Create a new contributor for a publication.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "Details about the contributor that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContributorEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the contributor that was just added.",
						"schema": {
							"$ref": "#/definitions/Contributor"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"404": {
						"x-summary": "Publication Not Found",
						"description": "The requested publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Publication Invalid",
						"description": "The requested publication is not part of the requested submission. It could be also because the publication is not editable by the requested user",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/contributors/{contributorId}": {
			"get": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Get a contributor.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "contributorId",
						"in": "path",
						"description": "Contributor ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The contributor details",
						"schema": {
							"$ref": "#/definitions/Contributor"
						}
					},
					"403": {
						"x-summary": "Publication Invalid",
						"description": "The requested publication is not part of the requested submission. Or you do not have permission to edit this publication.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission, publication or author could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Edit a Contributor.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "contributorId",
						"in": "path",
						"description": "Contributor ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the contributor that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContributorEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The contributor that was just edited with the new values after the update has occurred.",
						"schema": {
							"$ref": "#/definitions/Contributor"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This error indicates one of the following:\n* This contributor is assigned to a publication that does not belong to this submission.\n* This contributor is assigned to a publication that has already been published. You must create a new version of the publication to modify contributor details.\n* You do not have permission to edit contributors for this publication.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission or publication or author could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Delete a contributor.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "contributorId",
						"in": "path",
						"description": "Contributor ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The contributor that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Contributor"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This may mean one of the following:\n* You are not allowed to edit the contributors for this publication.\n* This contributor is assigned to a publication that is not part of the requested submission.\n* This contributor is assigned to a published publication and can not be edited.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested submission or publication or author could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/submissions/{submissionId}/publications/{publicationId}/contributors/saveOrder": {
			"put": {
				"tags": [
					"Submissions / Publications / Contributors"
				],
				"summary": "Reorder publication's contributors",
				"description": "Change the order of the contributor's as they are listed in the publication.",
				"parameters": [
					{
						"name": "submissionId",
						"in": "path",
						"description": "Submission ID",
						"required": true,
						"type": "integer"
					},
					{
						"name": "publicationId",
						"in": "path",
						"description": "Publication ID",
						"required": true,
						"type": "integer"
					},
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"sortedAuthors": {
									"type": "array",
									"description": "An array of contributor objects in the order they should be listed.",
									"items": {
										"$ref": "#/definitions/Contributor"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An array of contributor objects in the new order.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Contributor"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "This may mean one of the following:\n* You are not allowed to edit the contributors for this publication.\n* This contributor is assigned to a publication that is not part of the requested submission.\n* This contributor is assigned to a published publication and can not be edited.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The publication could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/issues": {
			"get": {
				"tags": [
					"Issues"
				],
				"summary": "Get a list of issues.",
				"description": "Results are eordered by `datePublished`.",
				"parameters": [
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "datePublished",
						"enum": [
							"datePublished",
							"lastModified",
							"seq"
						]
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					},
					{
						"name": "isPublished",
						"description": "Filter returned issues by those that have been published. Pass a `false` value to return only unpublished issues. Only administrators and journal managers are allowed to access unpublished issues.",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "volumes",
						"description": "Filter returned issues by those in a specific volume.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "numbers",
						"description": "Filter returned issues by those assigned a specific number.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "years",
						"description": "Filter returned issues by those in a specific year.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the title, description and year. It will also attempt to match search phrases using the localised issue identification. For example, in English a search for `Vol. 1 No. 2 (2018)` will match an issue with a volume of `1`, a number of `2` and a year of `2018`. The precise format differs for each language.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of issues.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/IssueSummary"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The requested volume, number or year is not valid.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/issues/current": {
			"get": {
				"tags": [
					"Issues"
				],
				"summary": "Get the current issue.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The current issue.",
						"schema": {
							"$ref": "#/definitions/Issue"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "This journal does not have a current issue.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/issues/{issueId}": {
			"get": {
				"tags": [
					"Issues"
				],
				"summary": "Get an issue by ID.",
				"description": "If the issue has a custom section order, the `seq` property of each `SectionSummary` will reflect the sequence for that issue.",
				"parameters": [
					{
						"name": "issueId",
						"in": "path",
						"description": "Issue ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The requested issue.",
						"schema": {
							"$ref": "#/definitions/Issue"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested issue could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get a list of users.",
				"parameters": [
					{
						"name": "roleIds",
						"description": "Filter the results by those who have one of these user role IDs.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "status",
						"description": "Filter results by active/disabled users.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "active",
						"enum": [
							"active",
							"disabled",
							"all"
						]
					},
					{
						"name": "assignedToSubmission",
						"description": "Filter results by those assigned to this submission ID.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "assignedToSubmissionStage",
						"description": "Filter results by those assigned to this submission stage. Will be ignored if no `assignedToSubmission` parameter exists.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "assignedToSection",
						"description": "Filter the results by those assigned as section editors to this section ID.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned. ",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id",
						"enum": [
							"id",
							"familyName",
							"givenName"
						]
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography` and `orcid`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of users.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/UserSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "Only administrators, journal managers and editors are allowed to access users on this site.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/users/{userId}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get a user by ID.",
				"parameters": [
					{
						"name": "userId",
						"description": "User ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "User details.",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				}
			}
		},
		"/users/reviewers": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get a list of reviewers.",
				"parameters": [
					{
						"name": "status",
						"description": "Filter results by active/disabled users.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "active",
						"enum": [
							"active",
							"disabled",
							"all"
						]
					},
					{
						"name": "reviewerRating",
						"description": "Filter results by those who have an average review assignment rating of at least `X` (valid ratings are between `1` and `5`).",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "reviewStage",
						"description": "Filter results by reviewers for one of the review stages in the workflow. Must be one of `WORKFLOW_STAGE_ID_INTERNAL_REVIEW` or `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`. In OJS, the review stage is `WORKFLOW_STAGE_ID_EXTERNAL_REVIEW`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "reviewsCompleted",
						"description": "Filter results by those who have completed at least `X` reviews. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "reviewsActive",
						"description": "Filter results by those who have `X` review assignments currently in progress. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "daysSinceLastAssignment",
						"description": "Filter results by those who's last review was assigned at least `X` days ago. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "averageCompletion",
						"description": "Filter results by those who complete a review assignment within `X` days on average.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "id",
						"enum": [
							"id",
							"familyName",
							"givenName"
						]
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography`, `orcid`, `interests`, and `gossip`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of reviewers.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/ReviewerSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "Only administrators, journal managers and editors are allowed to access users on this site.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/contexts": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get a list of contexts.",
				"description": "Get an array of the journals (OJS), presses (OMP) or preprint servers (OPS) hosted on this site.",
				"parameters": [
					{
						"name": "isEnabled",
						"description": "Filter results by enabled/disabled contexts. Any truthy or falsey value will get enabled/disabled contexts. Leave this parameter out to get all contexts.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `name`, `description`, `acronym`, or `abbreviation`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses":  {
					"200": {
						"x-summary": "Success",
						"description": "List of contexts.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/ContextSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view disabled contexts.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Contexts"
				],
				"summary": "Create a new context.",
				"description": "Create a new journal (OJS), press (OMP) or preprint server (OPS).",
				"parameters": [
					{
						"description": "Details about the context that should be created. The `path` field is required. The `name` is required in the site's primary locale.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContextEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the context that was just added.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/contexts/{contextId}": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get a context.",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Context details. Some details may be withheld if you are not a site admin or manager of that context.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Contexts"
				],
				"summary": "Edit a context.",
				"description": "Edit a journal (OJS), press (OMP) or preprint server (OPS).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about a context that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContextEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The context that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Contexts"
				],
				"summary": "Delete a context.",
				"description": "Delete a journal (OJS), press (OMP) or preprint server (OPS).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the context that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to delete this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/contexts/{contextId}/theme": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get the active theme.",
				"description": "Get the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested context could not be found. A 404 may also be returned when a context has no active theme, or the active theme plugin has not been installed or enabled.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Contexts"
				],
				"summary": "Edit the active theme.",
				"description": "Edit the active theme and theme options for any journal (OJS), press (OMP) or preprint server (OPS).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details you want to edit. The `themePluginPath` is required to specify the active theme, even if the theme is not being changed. Any additional keys/values must match the options defined by that theme.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The new theme and values for any of its theme options.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/site": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Get the site.",
				"responses":  {
					"200": {
						"x-summary": "Success",
						"description": "Site settings.",
						"schema": {
							"$ref": "#/definitions/Site"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Edit the site.",
				"parameters": [
					{
						"description": "The details about the site that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/SiteEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The site details with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/Site"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/site/theme": {
			"get": {
				"tags": [
					"Site"
				],
				"summary": "Get the theme.",
				"description": "Get the active theme and theme options for the site.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "Details about the active theme could not be found. This can occur when the active theme plugin is not installed or enabled.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Site"
				],
				"summary": "Edit the theme.",
				"description": "Get the active theme and theme options for the site.",
				"parameters": [
					{
						"description": "The details you want to edit. The `themePluginPath` is required to specify the active theme, even if the theme is not being changed. Any additional keys/values must match the options defined by that theme.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The new theme and values for any of its theme options.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/announcements": {
			"get": {
				"tags": [
					"Announcements"
				],
				"summary": "Get a collection of announcements.",
				"parameters": [
					{
						"name": "count",
						"description": "How many results to return in a single request.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 20
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `title`, `descriptionShort`, and `description`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "typeIds",
						"description": "Filter results by announcements of these announcement types.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of announcements.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/AnnouncementSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view announcements in this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Announcements"
				],
				"summary": "Create a new announcement.",
				"description": "Create and publish a new announcement in this context.",
				"parameters": [
					{
						"description": "Details about the announcement that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/AnnouncementEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the announcement that was just added.",
						"schema": {
							"$ref": "#/definitions/Announcement"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/announcements/{announcementId}": {
			"get": {
				"tags":  [
					"Announcements"
				],
				"summary": "Get an announcement.",
				"parameters": [
					{
						"name": "announcementId",
						"description": "Announcement ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Announcement details.",
						"schema": {
							"$ref": "#/definitions/Announcement"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view this announcement.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested announcement could not be found. Or you requested an announcement that is not part of this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Announcements"
				],
				"summary": "Edit an announcement.",
				"description": "Edit an announcement.",
				"parameters": [
					{
						"name": "announcementId",
						"description": "Announcement ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the announcement that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/AnnouncementEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The announcement that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/Announcement"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to edit this announcement.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested announcement could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Announcements"
				],
				"summary": "Delete an announcement.",
				"description": "Delete an announcement.",
				"parameters": [
					{
						"name": "announcementId",
						"description": "Announcement ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the announcement that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Announcement"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to delete this announcement.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested announcement could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois": {
			"get": {
				"tags": [
					"DOIs"
				],
				"summary": "Get a list of DOIs.",
				"parameters": [
					{
						"name": "status",
						"description": "Filter results by one or more DOI statuses. Must match the value of one of the `Doi::STATUS_UNREGISTERED`, `Doi::STATUS_SUBMITTED`, `Doi::STATUS_REGISTERED`, `Doi::STATUS_ERROR`, `Doi::STATUS_STALE` constants.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer",
							"enum": [1,2,3,4,5]
						}
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of requested DOIs",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/Doi"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access DOIs for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"DOIs"
				],
				"summary": "Create a new DOI.",
				"parameters": [
					{
						"description": "Details about the DOI that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/DoiEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the DOI that was just added.",
						"schema": {
							"$ref": "#/definitions/Doi"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/dois/{doiId}": {
			"get": {
				"tags": [
					"DOIs"
				],
				"summary": "Get a DOI by ID.",
				"parameters": [
					{
						"name": "doiId",
						"in": "path",
						"description": "DOI ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The DOI details.",
						"schema": {
							"$ref": "#/definitions/Doi"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access this DOI, or the DOI you requested is not part of this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested DOI could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"DOIs"
				],
				"summary": "Edit a DOI.",
				"description": "Modify the contents of a single DOI. When working with versioned content, if you'd like to modify the content of a DOI for a single version of a publication object, you need to include the `pubObjectType` and `pubObjectId` in the request body.",
				"parameters": [
					{
						"name": "doiId",
						"in": "path",
						"description": "DOI ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the DOI you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified. Two exceptions are `pubObjectType` and `pubObjectId`. They are optional but if one is used, the other must also be used.",
						"in": "body",
						"schema": {
							"allOf": [
								{
									"$ref": "#/definitions/DoiEditable"
								},
								{
									"type": "object",
									"properties": {
										"pubObjectType": {
											"type": "string",
											"enum": ["publication", "representation", "issue"],
											"description": "Publication object type to modify the DOI for."
										},
										"pubObjectId": {
											"type": "integer",
											"description": "ID of publication object you want ot modify the DOI for."
										}
									}
								}
							]
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The DOI that was just edited with the new values after the update has occurred.",
						"schema": {
							"$ref": "#/definitions/Doi"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "There was an error editing the DOI.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.403.editItemOutOfContext`|You cannot edit an item's DOI that is not in this context.|\n|`api.dois.403.pubTypeNotRecognized`|The publication type was not recognized.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested DOI could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}

				}
			},
			"delete": {
				"tags": [
					"DOIs"
				],
				"summary": "Delete a DOI.",
				"description": "Delete a single DOI. When working with versioned content, if you'd like to delete a DOI for a single version of a publication object, you will need to include the `pubObjectType` and the corresponding `pubObjectId` in the request body.",
				"parameters": [
					{
						"name": "doiId",
						"in": "path",
						"description": "DOI ID",
						"required": true,
						"type": "integer"
					},
					{
						"description": "Body params are optional but must be used together.",
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"pubObjectType": {
									"type": "string",
									"enum": ["publication", "representation", "issue"],
									"description": "Publication object type to modify the DOI for."
								},
								"pubObjectId": {
									"type": "integer",
									"description": "ID of publication object you want to modify the DOI for."
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the deleted DOI.",
						"schema": {
							"$ref": "#/definitions/Doi"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "There was an error deleting the DOI.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.403.editItemOutOfContext`|You cannot edit an item's DOI that is not in this context.|\n|`api.dois.403.pubTypeNotRecognized`|The publication type was not recognized.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested DOI could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/depositAll": {
			"put": {
				"tags": [
					"DOIs"
				],
				"summary": "Schedule all DOIs for deposit.",
				"description": "Schedules all publication objects with DOIs enabled that are published and include DOIs for deposit with the configured registration agency. DOIs will be queued and handled by the Jobs system in the order in which they were added.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to deposit DOIs in this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/exports/{fileId}": {
			"get": {
				"tags": [
					"DOIs"
				],
				"summary": "Download a DOI export.",
				"description": "Download a DOI export file that has been compiled. See `/dois/submissions/export` and `/dois/issues/export`.",
				"parameters": [],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"403": {
						"x-summary": "Request unauthorized",
						"description": "You are not authorized to access the requested file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/assignDois": {
			"post": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Assign DOIs to Submissions.",
				"description": "Assign DOIs to all publication objects of a submission, such as the publication and galleys. This will only assign DOIs to publication objects that have been enabled in the DOI settings.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"description": "A list of error messages. This will be empty if the response code is `200`.",
									"items": {
										"type": "string"
									}
								}
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One or more DOIs could not be assigned.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"description": "A list of error messages for any DOIs that could not be assigned.",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Could not create a DOI for the following submission: Lorem Ipsum Dolor Sit Amet. The submission must be assigned to an issue before a DOI can be generated."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal. Or no DOI prefix has been configured.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The submissions could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/export": {
			"put": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Export Submission DOIs.",
				"description": "Export submission metadata in a format that can be deposited with the currently configured DOI registration agency. This returns a file id which can be downloaded through the API endpoint `/dois/exports/{fileId}`. See \"Download a DOI Export\" above.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An object with the temporary file ID to download the exported data. See \"Download a DOI Export\" above.",
						"schema": {
							"type": "object",
							"properties": {
								"temporaryFileId": {
									"type": "integer"
								}
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The export could not be completed because of invalid request parameters or other required settings.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.400.invalidPubObjectIncluded`|One or more invalid publication objects were included with the request.|\n|`api.dois.400.noRegistrationAgencyConfigured`|No DOI registration agency has been configured for this journal.|\n|`api.dois.400.xmlExportFailed`|An XML validation error occurred and the XML could not be exported.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The export could not be completed because a submission or DOI could not be found with the corresponding ID.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.404.noPubObjectIncluded`|No valid publication objects were included with the request.|\n|`api.dois.404.doiNotFound`|The DOI you requested was not found.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/deposit": {
			"put": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Deposit Submission DOIs.",
				"description": "This will deposit the specified submission DOIs with the currently configured DOI registration agency.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "There was an error when submitting the DOIs to the registration agency.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.400.invalidPubObjectIncluded`|One or more invalid publication objects were included with the request.|\n|`api.dois.400.noRegistrationAgencyConfigured`|No DOI registration agency has been configured for this journal.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The deposit could not be completed because a submission or DOI could not be found with the corresponding ID.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.404.noPubObjectIncluded`|No valid publication objects were included with the request.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/markRegistered": {
			"put": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Mark Submission DOIs registered.",
				"description": "This will mark the specified submission DOIs as registered. This can be done to indicate the items were deposited outside of OJS.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One or more DOIs could not be marked registered.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"description": "A list of error messages for any DOIs that could not be assigned.",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Failed to mark the DOI registered for Lorem Ipsum Dolor Sit Amet. The submission must be published before the status can be updated."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/markUnregistered": {
			"put": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Mark Submission DOIs unregistered.",
				"description": "This will mark the specified submission DOIs as unregistered. This can be done to remove a DOI's previous registration status.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One or more DOIs could not be marked unregistered.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"description": "A list of error messages for any DOIs that could not be marked unregistered.",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Could not create a DOI for the following submission: {$pubObjectTitle}. It does not exist in the current journal context."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/submissions/markStale": {
			"put": {
				"tags": [
					"DOIs / Submissions"
				],
				"summary": "Mark Submission DOIs needs sync.",
				"description": "This will mark the specified submission DOIs as needing to be resubmitted to the registration agency to update their metadata records.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Submission IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One or more DOIs could not be marked registered.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"description": "A list of error messages for any DOIs that could not be marked stale.",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Failed to mark the DOI needs sync for Lorem Ipsum Dolor Sit Amet. The DOI cannot be marked needs sync because they have not yet been registered or submitted."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/assignDois": {
			"post": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Assign DOIs to Issues.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of error messages. This will be empty when the status is `200`.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": []
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "List of error messages for any issues for which the action failed.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Could not create a DOI for the following issue: Issue Title. It does not exist in the current journal context."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal. Or a DOI prefix is required to generate DOIs.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The issue could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/export": {
			"put": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Export Issue DOIs.",
				"description": "Export issue metadata in a format that can be deposited with the currently configured DOI registration agency. This returns a file id which can be downloaded through the API endpoint `/dois/exports/{fileId}`. See \"Download a DOI Export\" above.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An object with the temporary file ID needed to download the exported data. See \"Download a DOI Export\" above.",
						"schema": {
							"type": "object",
							"properties": {
								"temporaryFileId": {
									"type": "integer"
								}
							},
							"example": {
								"temporaryFileId": 1
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The export could not be completed because of invalid request parameters or other required settings.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.400.invalidPubObjectIncluded`|One or more invalid publication objects were included with the request.|\n|`api.dois.400.noRegistrationAgencyConfigured`|No DOI registration agency has been configured for this journal.|\n|`api.dois.400.xmlExportFailed`|An XML validation error occurred and the XML could not be exported.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The export could not be completed because an issue or DOI could not be found with the corresponding ID.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.404.noPubObjectIncluded`|No valid publication objects were included with the request.|\n|`api.dois.404.doiNotFound`|The DOI you requested was not found.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/deposit": {
			"put": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Deposit Issue DOIs.",
				"description": "This will deposit the specified issue DOIs with the currently configured DOI registration agency.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "There was an error when submitting the DOIs to the registration agency.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.400.invalidPubObjectIncluded`|One or more invalid publication objects were included with the request.|\n|`api.dois.400.noRegistrationAgencyConfigured`|No DOI registration agency has been configured for this journal.|\n|`api.dois.400.depositFailed`|Some items were not deposited successfully. Please check the individual items for their specific error messages.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The deposit could not be completed because a submission or DOI could not be found with the corresponding ID.\n\n|Error Code|Description|\n|---|---|\n|`api.dois.404.noPubObjectIncluded`|No valid publication objects were included with the request.|",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/markRegistered": {
			"put": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Mark Issue DOIs registered.",
				"description": "This will mark the specified issue DOIs as registered. This can be done to indicate the items were deposited outside of OJS.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "List of error messages for any issues for which the action failed.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Failed to mark the DOI registered for Vol. 1, No. 2: Lorem Ipsum. The issue must be published before the status can be updated."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/markUnregistered": {
			"put": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Mark Issue DOIs unregistered.",
				"description": "This will mark the specified issue DOIs as unregistered. This can be done to remove a DOI's previous registration status.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "List of error messages for any issues for which the action failed.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Could not create a DOI for the following issue: Vol. 1, No. 2: Lorem Ipsum. It does not exist in the current journal context."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/dois/issues/markStale": {
			"put": {
				"tags": [
					"DOIs / Issues"
				],
				"summary": "Mark Issue DOIs needs sync.",
				"description": "This will mark the specified issue DOIs as needing to be resubmitted to the registration agency to update their metadata records.",
				"parameters": [
					{
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"ids": {
									"type": "array",
									"description": "Issue IDs",
									"items": {
										"type": "integer"
									}
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "List of error messages for any issues for which the action failed.",
						"schema": {
							"type": "object",
							"properties": {
								"failedDoiActions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								}
							},
							"example": {
								"failedDoiActions": [
									"Failed to mark the DOI needs sync for Vol. 1, No. 2: Lorem Ipsum. The DOI cannot be marked needs sync because they have not yet been registered or submitted."
								]
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to manage DOIs in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No valid publication objects were included with the request.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emailTemplates": {
			"get": {
				"tags": [
					"Email Templates"
				],
				"summary": "Get email templates.",
				"parameters": [
					{
						"name": "alternateTo",
						"description": "Filter results by those assigned to a `Mailable` with this default email template key.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "isModified",
						"description": "Filter results by those that have been modified from the default template. This is different from `isCustom` because it will return custom templates alongside any default templates that have been modified.",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `key`, `subject`, `body`, or `description`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many templates to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the templates returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					}
				],
				"responses":  {
					"200": {
						"x-summary": "Success",
						"description": "List of email templates.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/EmailTemplateSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view email templates.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Email Templates"
				],
				"summary": "Create an email template.",
				"parameters": [
					{
						"description": "Details about the email template that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/EmailTemplateEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the email template that was just added.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to add an email template.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emailTemplates/{key}": {
			"get": {
				"tags": [
					"Email Templates"
				],
				"summary": "Get an email template by key.",
				"description": "Email templates are fetched by their key, rather than ID, so that a default template is retrieved if it has not been customized. See the [documentation](https://docs.pkp.sfu.ca/dev/documentation/en/email-templates).",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Email template details.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view email templates.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested email template could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Email Templates"
				],
				"summary": "Edit an email template.",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the email template that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/EmailTemplateEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The email template that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this email template. 2. You are an admin and you submitted changes for an email template in one context from the API endpoint of another context. To edit an email template, you must make a request to the API endpoint of that email template's context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested email template could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Email Templates"
				],
				"summary": "Delete an email template.",
				"description": "Default templates that have not been modified can not be deleted.",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the email template that was just deleted.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to delete this email template.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested email template could not be found. This will be returned if you try to delete a default email template that has not been modified.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emailTemplates/restoreDefaults": {
			"delete": {
				"tags": [
					"Email Templates"
				],
				"summary": "Restore default email templates.",
				"description": "Delete custom templates and reset all templates to their default settings.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of template keys which were deleted or reset.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to reset all email templates.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emails/authorEmails": {
			"get": {
				"tags": [
					"Emails"
				],
				"summary": "Gets an Author's email entry logs.",
				"parameters": [
					{
						"name": "submissionId",
						"description": "Filter results to emails associated with a specific submissionId.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "eventType",
						"description": "Filter results by an event type",
						"in": "query",
						"required": false,
						"type": "integer"
					}
				],
				"responses":  {
					"200": {
						"x-summary": "Success",
						"description": "List of emails.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/EmailSummary"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view emails.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "No matching resource for a provided query param. Example: no submission found matching the provided `submissionId` query param.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request query params are invalid. The error message will contain details about the invalid query param.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emails/{emailId}": {
			"get": {
				"tags": [
					"Emails"
				],
				"summary": "Get an email entry log by ID",
				"parameters": [
					{
						"name": "emailId",
						"description": "Email ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The email entry log details.",
						"schema": {
							"$ref": "#/definitions/EmailSummary"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access this email.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The email could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/institutions": {
			"get": {
				"tags": [
					"Institutions"
				],
				"summary": "Get a collection of institutions that have been added to this journal, press or preprint server.",
				"parameters": [
					{
						"name": "count",
						"description": "How many results to return in a single request.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the name or IP adress.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of institutions.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/InstitutionSummary"
									}
								}
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view institutions in this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Institutions"
				],
				"summary": "Create a new institution.",
				"description": "Add an institution to this context.",
				"parameters": [
					{
						"name": "Institution",
						"description": "Details about the institution that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/InstitutionEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the institution that was just added.",
						"schema": {
							"$ref": "#/definitions/Institution"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view this institution.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/institutions/{institutionId}": {
			"get": {
				"tags":  [
					"Institutions"
				],
				"summary": "Get an institution.",
				"parameters": [
					{
						"name": "institutionId",
						"description": "Institution ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Institution details.",
						"schema": {
							"$ref": "#/definitions/Institution"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view this institution.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested institution could not be found. Or you requested an institution that is not part of this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Institutions"
				],
				"summary": "Edit an institution.",
				"description": "Edit an institution.",
				"parameters": [
					{
						"name": "institutionId",
						"description": "Institution ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "Institution",
						"description": "The details about the institution that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/InstitutionEditable"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The institution that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/Institution"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to edit this institution.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested institution could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Institutions"
				],
				"summary": "Delete an institution.",
				"description": "Delete an institution.",
				"parameters": [
					{
						"name": "institutionId",
						"description": "Institution ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the institution that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Institution"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to delete this institution.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested institution could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/mailables": {
			"get": {
				"tags": [
					"Mailables"
				],
				"summary": "Get all mailables",
				"description": "Get a list of all Mailable classes configured in the journal. Each mailable class represents an email event, such as a notification to a reviewer.",
				"parameters": [
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `name` and `description` of a Mailable.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of fully qualified class names of mailables.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/MailableSummary"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view mailables.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/mailables/{id}": {
			"get": {
				"tags": [
					"Mailables"
				],
				"summary": "Get a mailable",
				"description": "Get a Mailable by its id.",
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the mailable derived from the fully-qualified class name, such as `PKP-mail-mailables-ReviewRequest`.",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The mailable's fully qualified class name",
						"schema": {
							"$ref": "#/definitions/Mailable"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view mailables.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested mailable could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/editorial": {
			"get": {
				"tags": [
					"Stats / Editorial"
				],
				"summary": "Get editorial activity stats.",
				"description": "Returns information about editorial activity such as the number of submissions accepted and declined, the number of days to reach editorial decisions, and the acceptance and rejection rates.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "sectionIds",
						"description": "Filter results by submissions to these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An array containing the requested stats. The `name` may change with translation but the `key` will be a reliable, unique identifier for the statistic.",
						"schema": {
							"type": "array",
							"example": [
								{
									"key": "submissionsReceived",
									"name": "Submissions Received",
									"value": 64
								},
								{
									"key": "submissionsAccepted",
									"name": "Submissions Accepted",
									"value": 54
								},
								{
									"key": "submissionsDeclined",
									"name": "Submissions Declined",
									"value": 4
								},
								{
									"key": "submissionsDeclinedDeskReject",
									"name": "Submissions Declined (Desk Reject)",
									"value": 0
								},
								{
									"key": "submissionsDeclinedPostReview",
									"name": "Submissions Declined (After Review)",
									"value": 4
								},
								{
									"key": "submissionsPublished",
									"name": "Submissions Published",
									"value": 53
								},
								{
									"key": "daysToDecision",
									"name": "Days to First Editorial Decision",
									"value": 42
								},
								{
									"key": "daysToAccept",
									"name": "Days to Accept",
									"value": 123
								},
								{
									"key": "daysToReject",
									"name": "Days to Reject",
									"value": 322
								},
								{
									"key": "acceptanceRate",
									"name": "Acceptance Rate",
									"value": 0.84
								},
								{
									"key": "declineRate",
									"name": "Rejection Rate",
									"value": 0.06
								},
								{
									"key": "declinedDeskRate",
									"name": "Desk Reject Rate",
									"value": 0
								},
								{
									"key": "declinedReviewRate",
									"name": "After Review Reject Rate",
									"value": 0.06
								}
							]
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access editorial statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/editorial/averages": {
			"get": {
				"tags": [
					"Stats / Editorial"
				],
				"summary": "Get yearly averages of editorial stats.",
				"description": "Returns yearly averages of editorial activity. To ensure averages are calculated fairly, partial years are not included in the averages. For example, if the first submission was received in October 2017 and the last submission was received in the current calendar year, only submissions from 2018 up until the end of the previous calendar year will be used to calculate the average.",
				"parameters": [
					{
						"name": "sectionIds",
						"description": "Filter results by submissions to these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An object containing the requested averages. Each property matches one of the properties from `/stats/editorial`. The value `-1` may be returned for a property if an average can not be calculated. This can occur if there is not a full calendar year of activity to average.",
						"schema": {
							"type": "array",
							"example": {
								"submissionsReceived": 32,
								"submissionsAccepted": 32,
								"submissionsDeclined": 32,
								"submissionsDeclinedDeskReject": 32,
								"submissionsDeclinedPostReview": 32,
								"submissionsPublished": 32
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access editorial statistics for this journal or press.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/contexts": {
			"get": {
				"tags": [
					"Stats / Contexts"
				],
				"summary": "Get a list of contexts sorted by the number of visits to their homepage.",
				"description": "Returns a list of journals, presses or preprint servers ordered by the number of visitors to their homepage. Only admins can access this endpoint.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for the number of visits after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for the number of visits before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "contextIds",
						"description": "Filter results by these contexts.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by contexts that match this search phrase. Searches the same context properties as the `searchPhrase` parameter in the `/contexts` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many contexts to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the contexts returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of contexts with the number of visits during the requested period.",
						"headers": {
							"X-Total-Count": {
								"description": "Only included in `text/csv` responses. The total number of rows available for this request. Use this with the `count` and `offset` query params to fetch all records.",
								"schema": {
									"type": "integer"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/ContextStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "ID,Title,Total\n1,Lorem Ipsum,100"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/contexts/timeline": {
			"get": {
				"tags": [
					"Stats / Contexts"
				],
				"summary": "Get visits by day or month.",
				"description": "Returns a monthly or daily timeline of the number of visitors to the homepage of each journal, press or preprint server. Only admins can access this endpoint.",
				"parameters": [
					{
						"name": "timelineInterval",
						"description": "Return the total daily or monthly views",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats for contexts after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for contexts before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "contextIds",
						"description": "Filter results by these contexts.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by contexts that match this search phrase. Searches the same context properties as the `searchPhrase` parameter in the `/contexts` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/TimelineInterval"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Date,Label,Total\n2023-03-04,\"March 4, 2023\",532\n2023-03-05,\"March 5, 2023\",351"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/contexts/{contextId}": {
			"get": {
				"tags": [
					"Stats / Contexts"
				],
				"summary": "Get the number of views of a context's homepage.",
				"description": "Returns the number of views of the homepage of a journal, press or preprint server.",
				"parameters": [
					{
						"name": "contextId",
						"description": "The context ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The total stats for the context during the period requested.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/ContextStats"
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "ID,Title,Total\n1,Lorem Ipsum,100"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/contexts/{contextId}/timeline": {
			"get": {
				"tags": [
					"Stats / Contexts"
				],
				"summary": "Get visits to one context by day or month.",
				"description": "Returns a monthly or daily timeline of visits to the homepage of this context.",
				"parameters": [
					{
						"name": "contextId",
						"description": "The context ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "timelineInterval",
						"description": "Return the total daily or monthly views",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/TimelineInterval"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Date,Label,Total\n2023-03-04,\"March 4, 2023\",532\n2023-03-05,\"March 5, 2023\",351"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/issues": {
			"get": {
				"tags": [
					"Stats / Issues"
				],
				"summary": "Get a list of issues ordered by the number of visits it received.",
				"description": "Returns a list of issues ordered by the total visits it received, based on the number of views of the TOC and the number of downloads of the issue galley.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for issues after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for issues before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by issues that match this search phrase. Searches the same issue properties as the `searchPhrase` parameter in the `/issues` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many issues to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the issues returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of issues with their total stats during the requested period.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/IssueStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "ID,\"Issue Identification\",Total,Views,Downloads\n123,\"Vol. 1, No. 2: Special issue name\",823,612,211"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/issues/timeline": {
			"get": {
				"tags": [
					"Stats / Issues"
				],
				"summary": "Get visits by day or month.",
				"description": "Returns a monthly or daily timeline of an issue's stats.",
				"parameters": [
					{
						"name": "timelineInterval",
						"description": "Return the total daily or monthly views",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats for issues after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for issues before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by issues that match this search phrase. Searches the same issue properties as the `searchPhrase` parameter in the `/issues` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "type",
						"description": "Whether to return a timeline based on views of the issue's table of contents or downloads of the issue's galley. Default: table of contents views.",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"files"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/TimelineInterval"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Date,Label,\n2023-01-02,\"January 2, 2023\",7341"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/issues/{issueId}": {
			"get": {
				"tags": [
					"Stats / Issues"
				],
				"summary": "Get the visitor statistics for one issue.",
				"description": "Returns an issue's view and download statistics broken down by type of request.",
				"parameters": [
					{
						"name": "issueId",
						"description": "The issue ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The total stats for the issue during the period requested.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/definitions/IssueStats"
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "ID,\"Issue Identification\",Total,Views,Downloads\n123,\"Vol. 1, No. 2: Special issue name\",823,612,211"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/issues/{issueId}/timeline": {
			"get": {
				"tags": [
					"Stats / Issues"
				],
				"summary": "Get one issue's visits by day or month.",
				"description": "Returns a monthly or daily timeline of visits to the issue.",
				"parameters": [
					{
						"name": "issueId",
						"description": "The issue ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "timelineInterval",
						"description": "Return the total daily or monthly views",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "type",
						"description": "Whether to return a timeline based on views of the issue table of contents or downloads of the issue galley. Default: table of contents views.",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"files"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/TimelineInterval"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Date,Label,\n2023-01-02,\"January 2, 2023\",7341"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get a list of publications ordered by visits.",
				"description": "Returns a list of publications ordered by the total number of views.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many publications to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the publications returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of publications with the number of visits during the requested period.",
						"headers": {
							"X-Total-Count": {
								"description": "Only included in `text/csv` responses. The total number of rows available for this request. Use this with the `count` and `offset` query params to fetch all records.",
								"schema": {
									"type": "integer"
								}
							}
						},
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PublicationStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "ID,Title,Total,Abstract Views,File Views,PDF,HTML,Other\n1,Lorem Ipsum,100,70,30,20,10,0"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/timeline": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get visits by day or month.",
				"description": "Returns a monthly or daily timeline of visits to the publications which match the request parameters.",
				"parameters": [
					{
						"name": "timelineInterval",
						"description": "Return the daily or monthly values.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "type",
						"description": "Whether to return a timeline based on abstract page views or file downloads. Default: abstract page views.",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"files"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/TimelineInterval"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Date,Label,\n2023-01-02,\"January 2, 2023\",7341"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/{submissionId}": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get one publication's stats.",
				"description": "Returns a publication's number of visits and downloads broken down by type.",
				"parameters": [
					{
						"name": "submissionId",
						"description": "The submission ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The total stats for the publication during the period requested.",
						"schema": {
							"$ref": "#/definitions/PublicationStats"
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/{submissionId}/timeline": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get one publication's visits by day or month.",
				"description": "Returns a monthly or daily timeline of visits to the publication.",
				"parameters": [
					{
						"name": "submissionId",
						"description": "The submission ID.",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"name": "timelineInterval",
						"description": "Return the total daily or monthly views",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "month",
						"enum": [
							"day",
							"month"
						]
					},
					{
						"name": "dateStart",
						"description": "Return stats after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "type",
						"description": "Whether to return a timeline based on abstract page views or file downloads. Default: abstract page views.",
						"in": "query",
						"required": false,
						"type": "string",
						"enum": [
							"files"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of days or months with the total stats for that day or month.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TimelineInterval"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested resource was not found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/files": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get a list of published files ordered by downloads.",
				"description": "Returns a list of published files ordered by their total downloads.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many files to return in a single request. Max is 100.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the files returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of files with their total stats during the requested period.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PublicationFileStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "\"Publication Id\",Title,\"File Id\",Filename,Type,\"File Views\"\n123,\"Lorem Ipsum\",456,lorem-ipsum-file.pdf,\"Primary File\",789"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/countries": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get a list of countries ordered by the number of visits to publications.",
				"description": "Returns a list of countries ordered by the number of visits to publications from each country. This endpoint is only available when the context has been configured to collect geographical statistics.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many countries to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the countries returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of countries with their total stats during the requested period.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PublicationCountryStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Country,Total,Unique\nCAN,456,321"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/regions": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get a list of regions ordered by the number of visits to publications.",
				"description": "Returns a list of regions ordered by the number of visits to publications from each region. This endpoint is only available when the context has been configured to collect regional geographical statistics.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many regions to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the regions returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of regions with their total stats during the requested period.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PublicationRegionStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "Region,Country,Total,Unique\nCA-BC,CA,456,321"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/publications/cities": {
			"get": {
				"tags": [
					"Stats / Publications"
				],
				"summary": "Get a list of cities ordered by the number of visits to publications.",
				"description": "Returns a list of cities ordered by the number of visits to publications from each city. This endpoint is only available when the context has been configured to collect city geographical statistics.",
				"parameters": [
					{
						"name": "dateStart",
						"description": "Return stats for publications after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "dateEnd",
						"description": "Return stats for publications before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "issueIds",
						"description": "Filter results by publications in these issues.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "sectionIds",
						"description": "Filter results by publications in these sections.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "submissionIds",
						"description": "Filter results by these submissions.",
						"in": "query",
						"required": false,
						"type": "array",
						"items": {
							"type": "integer"
						}
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by publications that match this search phrase. Searches the same submission properties as the `searchPhrase` parameter in the `/submissions` endpoint.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many cities to return in a single request. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer",
						"default": 30
					},
					{
						"name": "offset",
						"description": "Offset the cities returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of cities with their total stats during the requested period.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/PublicationCityStats"
									}
								}
							},
							"text/csv": {
								"schema": {
									"type": "string"
								},
								"example": "City,Region,Country,Total,Unique\nCA-BC-Vancouver,CA-BC,CA,456,321"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access statistics for this journal, press or preprint server.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/stats/users": {
			"get": {
				"tags": [
					"Stats / Users"
				],
				"summary": "Get user statistics.",
				"description": "Returns a count of the number of registered users by role. The `registeredBefore` and `registeredAfter` params reflect current user roles. A user who registered as an author in January, 2019 but was later appointed to subeditor will be counted as a subeditor when the registration date range includes January, 2019, even though they did not become a subeditor until a later date.",
				"parameters": [
					{
						"name": "registeredAfter",
						"description": "Include users who registered after this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "registeredBefore",
						"description": "Include users who registered before this date.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"description": "Whether to include `active`, `disabled` or all users. Default: `active`.",
						"in": "query",
						"required": false,
						"type": "string",
						"default": "active",
						"enum": [
							"active",
							"disabled",
							"all"
						]
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The user registration stats broken down by role.",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": ["integer", "string"],
										"description": "One of the `ROLE_ID_*` constants. Or `total` for users in all roles."
									},
									"name": {
										"type": "string",
										"description": "A user-facing name for the role."
									},
									"value":{
										"type":  "integer",
										"description": "The number of registered users in this role."
									}
								}
							},
							"example": [
								{
									"id": "total",
									"name": "Total",
									"value": 304
								},
								{
									"id": 16,
									"name": "Journal Manager",
									"value": 4
								},
								{
									"id": 17,
									"name": "Section Editor",
									"value": 14
								},
								{
									"id": 4097,
									"name": "Assistant",
									"value": 1
								},
								{
									"id": 65536,
									"name": "Author",
									"value": 220
								},
								{
									"id": 4096,
									"name": "Reviewer",
									"value": 107
								},
								{
									"id": 1048576,
									"name": "Reader",
									"value": 207
								},
								{
									"id": 2097152,
									"name": "Subscription Manager",
									"value": 0
								}
							]
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "Your request was not valid. One or more of the request parameters will be invalid. The error message will contain details about the invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to access user statistics for this journal or press.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/vocabs": {
			"get": {
				"tags": [
					"Vocabs"
				],
				"summary": "Get controlled vocab entries.",
				"parameters": [
					{
						"name": "vocab",
						"description": "The type of controlled vocab you want to retrieve entries for. One of `CONTROLLED_VOCAB_*`.",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "locale",
						"description": "The locale key, such as `en`, you want to retrieve entries for. If no `locale` is provided, entries will be provided in the user's current locale or fall back to the journal's primary locale.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "A list of the entries available in this journal.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The `locale` that you requested is not supported in this journal.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The journal you requested could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/temporaryFiles": {
			"options": {
				"tags": [
					"Temporary Files"
				],
				"summary": "Get headers for file uploads.",
				"description": "Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					}
				}
			},
			"post": {
				"tags": [
					"Temporary Files"
				],
				"summary": "Upload a file.",
				"description": "Upload a file to the temporary file storage area and receive a temporary file ID.",
				"parameters": [
					{
						"name": "...",
						"description": "Use any parameter key to upload your file. The API endpoint will retrieve the first uploaded file.",
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The temporary file ID to use in other API requests.",
						"schema": {
							"type": "object",
							"properties": {
								"documentType": {
									"type": "string"
								},
								"id": {
									"type": "integer"
								},
								"mimetype": {
									"type": "string"
								},
								"name": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "No uploaded file could be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/_payments": {
			"put": {
				"tags": [
					"Backend"
				],
				"summary": "Save payment settings.",
				"description": "This endpoint is used on the settings page to save payment plugin settings alongside the general journal settings for enabling payments and setting the currency.",
				"parameters": [
					{
						"description": "None of these properties are required. In addition to `paymentsEnabled` and `currency`, you may pass any property that corresponds with a setting for an enabled `paymethod` plugin.",
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"paymentsEnabled": {
									"type": "boolean"
								},
								"currency": {
									"type": "string"
								},
								"...": {
									"type": "string"
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The parameters you submitted"
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/_uploadPublicFile": {
			"options": {
				"tags": [
					"Backend"
				],
				"summary": "Get headers for file uploads.",
				"description": "Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request.",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					}
				}
			},
			"post": {
				"tags": [
					"Backend"
				],
				"summary": "Upload a file.",
				"description": "The user's public file directory supports files uploaded through the TinyMCE rich text editor. This is commonly used in context settings but is also available to all registered users through their profile biography.",
				"parameters": [
					{
						"name": "file",
						"description": "Use the `file` key to upload your file.",
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An object containing the URL to the uploaded file.",
						"schema": {
							"type": "object",
							"properties": {
								"url": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "One of the following errors occurred.\n* No uploaded file could be found.\n* This file type is not supported.\n* The file you uploaded identifies itself as an image but it is not a valid image.\n* The mime-type did not match the file extension.\n* The file is too large.\n* The server configuration could not support this file upload because there is no temporary directory, it doesn't have permission to write to the directory, or a PHP extension stopped the file upload.\n\nThe error message will contain further details.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to upload this public file.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"409": {
						"description": "The upload failed for an unknown reason.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"413": {
						"description": "Your user file directory is full.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"500": {
						"description": "The server is unable to read or write to the public files directory.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/_submissions": {
			"get": {
				"tags": [
					"Backend"
				],
				"summary": "Get submissions.",
				"description": "This endpoint delivers a little bit of extra information about each submission that is used in the submissions list. This private endpoint saves a few extra HTTP requests, but it is more database-intensive for each query.",
				"parameters": [
					{
						"description": "Accepts most parameters supported by the public `/submissions` endpoint."
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of submissions."
					}
				}
			}
		},
		"/_submissions/assigned": {
			"get": {
				"tags": [
					"Submissions"
				],
				"summary": "Get a list of submissions assigned  to a user",
				"parameters": [
					{
						"description": "Accepts most parameters supported by the public `/submissions` endpoint."
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of submissions."
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/_submissions/reviews": {
			"get": {
				"tags": [
					"Submissions"
				],
				"summary": "Get a list of submissions in a review stage",
				"parameters": [
					{
						"name": "needsReviewers",
						"description": "Filter results by submissions which need reviewers to be assigned",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "awaitingReviews",
						"description": "Filter results by those awaiting reply from reviewers",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "reviewsSubmitted",
						"description": "Filter results by those where reviews were submitted by reviewers",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "reviewsOverdue",
						"description": "Filter results by those with one or more overdue review assignment",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "revisionsRequested",
						"description": "Filter results by those in the review stage where file revision is requested from the author",
						"in": "query",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of submissions."
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/_submissions/viewsCount": {
			"get": {
				"tags": [
					"Submissions / DashboardViews"
				],
				"summary": "Get a collection of views count",
				"description": "This endpoint delivers the count of submissions and review assignments for all views available to the user",
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of dashboard views name (key) and count (value) pairs.",
						"schema": {
							"type": "object"
						}
					}
				}
			}
		},
	  	"/contexts/editDoiRegistrationAgencyPlugin" : {
			"put": {
				"tags": [
					"Backend"
				],
				"summary": "Edit registration agency plugin settings",
				"description": "This endpoint is for directly editing DOI registration agency plugin settings. It is used as part of the unified DOI management settings options in the UI.",
				"parameters": [
					{
						"description": "Parameters in addition to those listed will be specific to the plugin and its settings.",
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"enabledRegistrationAgency": {
									"type": "string"
								},
								"automaticDeposit": {
									"type": "boolean"
								}
							},
							"additionalProperties": true
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "Details of the DOI registration settings and updated plugin settings.",
						"schema":{
							"type": "object",
							"properties": {
								"enabledRegistrationAgency": {
									"type": "string"
								},
								"automaticDeposit": {
									"type": "boolean"
								}
							},
							"additionalProperties": true
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "The values you sent with the request did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "The error indicates one of the following:\n*You are not allowed to edit one context from a different context's endpoint\n* You are not allowed to edit a context-specific plugin from the site-wide endpoint. You must use a context (journal/press/server) endpoint.\n* You do not have permission to edit this context (journal/press/server).",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/orcid/requestAuthorVerification/{authorId}": {
			"post": {
				"tags": [
					"ORCID"
				],
				"summary": "Allows Journal Manager and Editors to send email request to an author to link their ORCID to a submission in OJS.",
				"parameters": [
					{
						"name": "authorId",
						"in": "path",
						"description": "Author ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to send ORCID verification requests or ORCID is not enabled.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "A resource was not found.",
						"description": "Could not find author or there are no context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/orcid/deleteForAuthor/{authorId}": {
			"delete": {
				"tags": [
					"ORCID"
				],
				"summary": "Allows Journal Manager and Editors to revoke an author's ORCID and access tokens associated with a submission.",
				"parameters": [
					{
						"name": "authorId",
						"in": "path",
						"description": "Author ID",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "An empty response body."
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to revoke an author's ORCID access and token data or ORCID is not enabled..",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "A resource was not found.",
						"description": "Could not find author or there are no context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		}
	}
}
