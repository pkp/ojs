<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "../../../topic.dtd">

<!--
  * 000028.xml
  *
  * Copyright (c) 2003-2010 John Willinsky
  * Weiterverbreitung nach GNU GPL v2. Die vollständigen Bedingungen für die Weiterverbreitung dieser Datei finden Sie unter docs/COPYING.
  
  * Version, erstellt durch die Freie Universität Berlin, Redaktionen Querelles-Net und Forum Qualitative Sozialforschung (FQS).
  * Verwaltungsseiten - Lesewerkzeuge - Kontexte. 
  *
  * $Id$
  -->

<topic id="journal/topic/000028" locale="de_DE" title="Kontexte" toc="journal/toc/000005" key="journal.managementPages.readingTools.contexts">
	<section>
		<![CDATA[<p>Jedes Lesewerkzeuge-Set besteht aus individuellen Werkzeugen (z.B. verwandte Arbeiten, Online-Foren usw.); für jedes Werkzeug sind relevante Datenbanken aufgeführt, die wiederum nach Kontexten gruppiert sind. Diese Datenbanken können ebenso wie die Kontexte, denen sie zugeordnet sind, neu generiert, bearbeitet oder gelöscht werden.</p><p><i>Metadaten für Items innerhalb eines Kontexts</i>. Zeitschriftenverwalter/innen können den Titel eines Werkzeugs verändern. Es kann auch eingestellt werden, ob die von der Autorin/dem Autor eines Beitrags vergebenen Schlagworte (als Standardeinstellung), deren Name (z.B.  zur Nutzung für "Andere Arbeiten der Autorin/des Autors") oder geografische Indizierungsbegriffe für die Recherche in Datenbanken genutzt werden sollen. Eine weitere Option, die in Verbindung mit "Begriff definieren" verwandt werden kann, erlaubt Lesenden, einen Suchbegriff durch Doppelklicken auf ein beliebiges Wort in einem Beitrag der Zeitschrift auszuwählen. Zeitschriftenverwalter/innen können ausgehend von diesen Optionen eigene Lesewerkzeuge generieren.</p><p><i>Suche für jedes Werkzeug bearbeiten</i>. Unter "Suche" können Zeitschriftenverwalter/innen die Such-URL jeder Datenbank für ein Werkzeug bearbeiten oder löschen, ebenso können sie die Reihenfolge der Datenbanken, die für ein Werkzeug  angezeigt werden, verändern. Für jede Datenbank ist eine URL verfügbar, die Lesenden ermöglicht, sich über diese Datenbank zu informieren und eine weitere URL für die durchzuführende Suche. Es werden zwei Arten von Sucheinstellungen unterstützt, eine "GET-Suche" und, sollte dies für eine Datenbank nicht möglich sein, eine "POST-Suche".</p>]]>
	</section>
	<section title="GET-Suche">
		<![CDATA[<p>Für GET-Suchen sollte eine Suche durchlaufen und der resultierende  URL angesehen werden. Z.B. ergibt eine Such nach "FOOBAR" in Google den URL </p><p><samp class="code">http://www.google.ca/search?hl=en&q=FOOBAR&meta=</samp></p><p>Nun muss der Suchbegriff, hier also "FOOBAR" ersetzt werden durch die Variable &#123;$formKeywords&#125;. Sobald OJS diese Variable identifiziert, wird sie durch einen passenden Wert aus den Metadaten des Beitrags ersetzt. Dies ergibt eine Such-URL von</p><p><samp class="code">http://www.google.ca/search?hl=en&q=&#123;$formKeywords&#125;&meta=</samp></p><p> für den RT. Da die anderen Parameter in diesem Fall nicht erforderlich sind, kann eine vereinfachte URL verwandt werden: </p><p><samp class="code">http://www.google.ca/search?q=&#123;$formKeywords&#125;</samp></p><p>für den RT.</p>]]>
	</section>
	<section title="POST-Suche">
		<![CDATA[<p>POST-Suchen sind komplizierter. Über Google kann wieder die Seite recherchiert und <samp class="code">&lt;form action="/search" ...&gt;</samp> notiert werden, sodass die Start-URL <samp class="code">http://www.google.com/search</samp>  ist. Dann kann jedes der <samp class="code">&lt;input ...&gt;</samp> und<samp class="code">&lt;select ... &gt;</samp>-Elemente betrachtet und als<samp class="code">name=value</samp>-Paar, getrennt nach <samp class="code">&</samp> am Ende der URL hinzugefügt werden. Das Element, das das Textfeld spezifiziert, das von Nutzer/innen eingegeben Text akzeptiert (im Fall von Google <samp class="code">q</samp>), sollte wieder einen Wert &#123;$formKeywords&#125; haben, der durch den  jeweils angemessenen Wert ersetzt wird.</p><p>Eine etwas einfachere Weise der POST-Suche ist es, die HTML-Quelle in eine Datei zu kopieren, <samp class="code">method=post</samp> zu <samp class="code">method=get</samp> zu ändern in dem passenden Feld, und den Wert <samp class="code">action=</samp> so zu verändern, dass eine vollständige URL entsteht, z.B. <samp class="code">http://www.google.com/search</samp> statt nur <samp class="code">/search</samp>. Danach kann die geänderte HTML-Datei in einem Browser angesehen und die oben beschriebene GET-Methode angewandt werden, um die URL zu konstruieren.</p><p>Da einige Suchmaschinen GET-Anfragen nicht unterstützen bzw. wenn erkennbar ist, dass die zuvor beschriebene Vorgehensweise nicht funktioniert, können POST-Daten in das "Post-Daten suchen"-Feld eingegeben werden. Wenn das obige Beispiel ein POST-Verfahren erfordert, würde <samp class="code">http://www.google.com/search</samp> für die Such-URL eingegeben werden und<samp class="code">q=&#123;$formKeywords&#125;</samp> für die Post-Daten.</p><p>Es sollte geprüft und sichergestellt werden, dass die URLs funktionieren, indem &#123;$formKeywords&#125; durch einen Term in der URL ersetzt und getestet wird, dass die erwarteten Suchergebnisse resultieren. Es ist zu beachten, dass POST-Suchen nicht immer möglich sind, jeweils abhängig von dem angesprochenen Server. Für URLs ohne eine angemessene Suchmaschine ist eine andere Möglichkeit, Google zu nutzen und auf diesen Server zu beschränken. Z.B. kann <samp class="code">site:mysite.com FOOBAR</samp> in Google genutzt werden, um nach dem Begriff "FOOBAR" nur innerhalb von mysite.com zu suchen. Dies wird in den aktuellen RTs für verschiedene Server genutzt.</p>]]>
	</section>
</topic>
